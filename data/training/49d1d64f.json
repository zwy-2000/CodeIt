{"program": "def solve_49d1d64f(I):\n    x1 = upscale(I, TWO)\n    x2 = asindices(x1)\n    x3 = corners(x2)\n    x4 = fill(x1, ZERO, x3)\n    x5 = height(x4)\n    x6 = width(x4)\n    x7 = equality(x5, SIX)\n    x8 = equality(x6, SIX)\n    x9 = compose(decrement, halve)\n    x10 = x9(x5)\n    x11 = x9(x6)\n    x12 = astuple(x10, x6)\n    x13 = crop(x4, ORIGIN, x12)\n    x14 = increment(x10)\n    x15 = toivec(x14)\n    x16 = astuple(x14, x6)\n    x17 = crop(x4, x15, x16)\n    x18 = vconcat(x13, x17)\n    x19 = branch(x7, x18, x4)\n    x20 = decrement(x5)\n    x21 = branch(x7, x20, x5)\n    x22 = astuple(x21, x11)\n    x23 = crop(x19, ORIGIN, x22)\n    x24 = increment(x11)\n    x25 = tojvec(x24)\n    x26 = astuple(x21, x24)\n    x27 = crop(x19, x25, x26)\n    x28 = hconcat(x23, x27)\n    O = branch(x8, x28, x19)\n    return O\n", "training_examples": [{"input": [[1, 2], [3, 8]], "output": [[0, 1, 2, 0], [1, 1, 2, 2], [3, 3, 8, 8], [0, 3, 8, 0]]}, {"input": [[1, 8, 4], [8, 3, 8]], "output": [[0, 1, 8, 4, 0], [1, 1, 8, 4, 4], [8, 8, 3, 8, 8], [0, 8, 3, 8, 0]]}, {"input": [[2, 1, 4], [8, 0, 2], [3, 2, 8]], "output": [[0, 2, 1, 4, 0], [2, 2, 1, 4, 4], [8, 8, 0, 2, 2], [3, 3, 2, 8, 8], [0, 3, 2, 8, 0]]}], "test_examples": [{"input": [[2, 8], [1, 4], [3, 4]], "output": [[0, 2, 8, 0], [2, 2, 8, 8], [1, 1, 4, 4], [3, 3, 4, 4], [0, 3, 4, 0]]}], "task_key": "49d1d64f", "extra_info": ""}