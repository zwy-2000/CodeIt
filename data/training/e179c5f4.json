{"program": "def solve_e179c5f4(I):\n    x1 = height(I)\n    x2 = ofcolor(I, ONE)\n    x3 = first(x2)\n    x4 = shoot(x3, UP_RIGHT)\n    x5 = fill(I, ONE, x4)\n    x6 = ofcolor(x5, ONE)\n    x7 = urcorner(x6)\n    x8 = shoot(x7, NEG_UNITY)\n    x9 = fill(x5, ONE, x8)\n    x10 = ofcolor(x9, ONE)\n    x11 = subgrid(x10, x9)\n    x12 = height(x11)\n    x13 = width(x11)\n    x14 = decrement(x12)\n    x15 = astuple(x14, x13)\n    x16 = ulcorner(x10)\n    x17 = crop(x9, x16, x15)\n    x18 = repeat(x17, NINE)\n    x19 = merge(x18)\n    x20 = astuple(x1, x13)\n    x21 = crop(x19, ORIGIN, x20)\n    x22 = hmirror(x21)\n    O = replace(x22, ZERO, EIGHT)\n    return O\n", "training_examples": [{"input": [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [1, 0]], "output": [[8, 1], [1, 8], [8, 1], [1, 8], [8, 1], [1, 8], [8, 1], [1, 8], [8, 1], [1, 8]]}, {"input": [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [1, 0, 0]], "output": [[8, 1, 8], [1, 8, 8], [8, 1, 8], [8, 8, 1], [8, 1, 8], [1, 8, 8], [8, 1, 8], [8, 8, 1], [8, 1, 8], [1, 8, 8]]}, {"input": [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 0, 0, 0]], "output": [[8, 8, 8, 1], [8, 8, 1, 8], [8, 1, 8, 8], [1, 8, 8, 8], [8, 1, 8, 8], [8, 8, 1, 8], [8, 8, 8, 1], [8, 8, 1, 8], [8, 1, 8, 8], [1, 8, 8, 8]]}], "test_examples": [{"input": [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [1, 0, 0, 0, 0]], "output": [[8, 1, 8, 8, 8], [1, 8, 8, 8, 8], [8, 1, 8, 8, 8], [8, 8, 1, 8, 8], [8, 8, 8, 1, 8], [8, 8, 8, 8, 1], [8, 8, 8, 1, 8], [8, 8, 1, 8, 8], [8, 1, 8, 8, 8], [1, 8, 8, 8, 8]]}], "task_key": "e179c5f4", "extra_info": ""}