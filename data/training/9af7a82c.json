{"program": "def solve_9af7a82c(I):\n    x1 = objects(I, T, F, F)\n    x2 = order(x1, size)\n    x3 = valmax(x1, size)\n    x4 = rbind(astuple, ONE)\n    x5 = lbind(subtract, x3)\n    x6 = compose(x4, size)\n    x7 = chain(x4, x5, size)\n    x8 = fork(canvas, color, x6)\n    x9 = lbind(canvas, ZERO)\n    x10 = compose(x9, x7)\n    x11 = fork(vconcat, x8, x10)\n    x12 = compose(cmirror, x11)\n    x13 = apply(x12, x2)\n    x14 = merge(x13)\n    O = cmirror(x14)\n    return O\n", "training_examples": [{"input": [[2, 2, 1], [2, 3, 1], [1, 1, 1]], "output": [[1, 2, 3], [1, 2, 0], [1, 2, 0], [1, 0, 0], [1, 0, 0]]}, {"input": [[8, 8, 2], [3, 8, 8], [3, 3, 4], [3, 3, 4]], "output": [[3, 8, 4, 2], [3, 8, 4, 0], [3, 8, 0, 0], [3, 8, 0, 0], [3, 0, 0, 0]]}, {"input": [[3, 1, 1, 4], [2, 2, 2, 4], [4, 4, 4, 4]], "output": [[4, 2, 1, 3], [4, 2, 1, 0], [4, 2, 0, 0], [4, 0, 0, 0], [4, 0, 0, 0], [4, 0, 0, 0]]}, {"input": [[1, 1, 1], [2, 2, 1], [2, 8, 1], [2, 8, 1]], "output": [[1, 2, 8], [1, 2, 8], [1, 2, 0], [1, 2, 0], [1, 0, 0], [1, 0, 0]]}], "test_examples": [{"input": [[8, 8, 2, 2], [1, 8, 8, 2], [1, 3, 3, 4], [1, 1, 1, 1]], "output": [[1, 8, 2, 3, 4], [1, 8, 2, 3, 0], [1, 8, 2, 0, 0], [1, 8, 0, 0, 0], [1, 0, 0, 0, 0], [1, 0, 0, 0, 0]]}], "task_key": "9af7a82c", "extra_info": ""}